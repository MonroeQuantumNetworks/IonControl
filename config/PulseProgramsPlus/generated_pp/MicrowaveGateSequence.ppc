# autogenerated from 'C:/Users/jmizrahi/IonControl/config/PulseProgramsPlus/MicrowaveGateSequence.ppp' 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSMicrowave 2
const PMTChannel 8
const CalibrationCounterNo 16
const ResultChannel 1
const ShiftResultChannel 2
# variables 
var NULL 0
var FFFFFFFF 18446744073709551615
var inlinevar_2 1
var inlinevar_3 2
var inlinevar_4 8
var inlinevar_5 16
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var MicrowaveFreq 40, parameter, MHz, AD9912_FRQ
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var InitializationShutter 1, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var PreWaitTime 0, parameter, ms
var MicrowaveInitTime 0, parameter, ms
var QubitWaitTime 0, parameter, ms
var MicrowaveAnalyzeTime 0, parameter, ms
var PostWaitTime 0, parameter, ms
var DetectTime 1, parameter, ms
var piTime 40, parameter, us
var PostPulseWaitTime 0, parameter, ms
var MaxInitRepeat 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsMicrowaveApply 0, trigger
var PresenceThreshold 6, parameter
var UseGateSequence 0, parameter
var offset 40, parameter, ns
var IonLostExitcode 0xfffe0001, exitcode
var endLabel 0xfffe0000, exitcode
var experimentsleft 100
var initRemaining 0
var trainPhase 0
var pulseTime 0, parameter
var gapTime 0, parameter
var PulsesRemaining 0
var RamStartAddress 0, address
var currentexperiment 0
var coolPhotons 0
var NumberIgnoredBits 0, parameter
var CalibrateEvery 0, parameter
var DetectThreshold 1, parameter
var PiTimeIntegrator 0
var CalibrationSkipCounter 0
var MicrowaveCalibrationTime 0
var CalibrationCounters 0, counter
var CalibrationDetectPhotons 0
var one 1
# inline variables
# end header

# line 179: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 180: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 181: procedurecall set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 182: procedurecall set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 183: procedurecall set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 184: shiftexpression PiTimeIntegrator = piTime << NumberIgnoredBits
  LDWR piTime
  SHL NumberIgnoredBits
# line 184 assignment PiTimeIntegrator = piTime << NumberIgnoredBits
  STWR PiTimeIntegrator
# line 186 while_statement while not pipe_empty():
while_label_1: NOP
    JMPPIPEEMPTY end_while_label_1
# line 187: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 188: procedurecall     apply_next_scan_point()
apply_next_scan_point:  READPIPEINDF
  WRITEPIPEINDF
  READPIPE
  WRITEPIPE
  STWI
  JMPCMP apply_next_scan_point
# line 190 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 191 while_statement     while currentexperiment < experiments:
while_label_2: NOP
# line 191 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_2
# line 192: procedurecall         set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 193: procedurecall         cool()
# line 77: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 78: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 79: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 80: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 81: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 82 assignment     coolPhotons = load_count( PMTChannel )
# line 82: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 83: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 194 if statement         if MaxInitRepeat>0:
# line 194 condition         if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_3
# IF block
# line 195: procedurecall             adaptiveCool()
# line 86 assignment     initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 87 while_statement     while coolPhotons<PresenceThreshold:
while_label_4: NOP
# line 87 condition     while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_4
# line 88 if statement         if initRemaining==0:
# line 88 condition         if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_5
# IF block
# line 89: procedurecall             exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_5: NOP
# end if
# line 90: add_assignment:         initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 91: procedurecall         cool()
# line 77: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 78: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 79: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 80: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 81: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 82 assignment     coolPhotons = load_count( PMTChannel )
# line 82: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 83: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_4
end_while_label_4: NOP
# end while
end_if_label_3: NOP
# end if
# line 196 if statement         if PumpTime>0:
# line 196 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_6
# IF block
# line 197: procedurecall             pump()
# line 94: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 95: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 96: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_6: NOP
# end if
# line 198 if statement         if PreWaitTime>0:
# line 198 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_7
# IF block
# line 199: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_7: NOP
# end if
# line 200 if statement         if MicrowaveInitTime>0: 
# line 200 condition         if MicrowaveInitTime>0: 
  LDWR MicrowaveInitTime
  JMPZ end_if_label_8
# IF block
# line 201: procedurecall             qubitInit()
# line 99: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 100: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 101: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 102: procedurecall     update( MicrowaveInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveInitTime
# line 103: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_8: NOP
# end if
# line 202 if statement         if UseGateSequence>0:
# line 202 condition         if UseGateSequence>0:
  LDWR UseGateSequence
  JMPZ end_if_label_9
# IF block
# line 203: procedurecall             gateSequence()
# line 140 assignment     PulsesRemaining = read_ram() 
# line 140: procedurecall     PulsesRemaining = read_ram() 
  RAMREAD
  STWR PulsesRemaining
# line 141 while_statement     while PulsesRemaining>0:
while_label_10: NOP
# line 141 condition     while PulsesRemaining>0:
  LDWR PulsesRemaining
  JMPZ end_while_label_10
# line 142: add_assignment:         PulsesRemaining -= 1
  DEC PulsesRemaining
  STWR PulsesRemaining
# line 143 assignment         trainPhase = read_ram()
# line 143: procedurecall         trainPhase = read_ram()
  RAMREAD
  STWR trainPhase
# line 144 assignment         gapTime = read_ram()
# line 144: procedurecall         gapTime = read_ram()
  RAMREAD
  STWR gapTime
# line 145 if statement         if gapTime>0:
# line 145 condition         if gapTime>0:
  LDWR gapTime
  JMPZ end_if_label_11
# IF block
# line 146: procedurecall             set_dds( channel=DDSMicrowave, phase=trainPhase )
  DDSPHS DDSMicrowave, trainPhase
# line 147: procedurecall             set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 148: procedurecall             update( gapTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE gapTime
end_if_label_11: NOP
# end if
# line 149 assignment         pulseTime = read_ram()     # has to be given in units of pi/2 time
# line 149: procedurecall         pulseTime = read_ram()     # has to be given in units of pi/2 time
  RAMREAD
  STWR pulseTime
# line 150: shiftexpression         pulseTime = piTime << pulseTime
  LDWR piTime
  SHL pulseTime
# line 150 assignment         pulseTime = piTime << pulseTime
  STWR pulseTime
# line 151: add_assignment:         pulseTime += offset
  LDWR pulseTime
  ADDW offset
  STWR pulseTime
# line 152 if statement         if pulseTime>0:
# line 152 condition         if pulseTime>0:
  LDWR pulseTime
  JMPZ end_if_label_12
# IF block
# line 153: procedurecall             set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 154: procedurecall             update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 155: procedurecall             set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 156: procedurecall             update( PostPulseWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostPulseWaitTime
end_if_label_12: NOP
# end if
  JMP while_label_10
end_while_label_10: NOP
# end while
end_if_label_9: NOP
# end if
# line 204 if statement         if QubitWaitTime>0:
# line 204 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_13
# IF block
# line 205: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_13: NOP
# end if
# line 206 if statement         if MicrowaveAnalyzeTime>0:
# line 206 condition         if MicrowaveAnalyzeTime>0:
  LDWR MicrowaveAnalyzeTime
  JMPZ end_if_label_14
# IF block
# line 207: procedurecall             qubitAnalyze()
# line 113: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveAnalyzePhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveAnalyzePhase
# line 114: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 115: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 116: procedurecall     update( MicrowaveAnalyzeTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveAnalyzeTime
# line 117: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_14: NOP
# end if
# line 208 if statement         if PostWaitTime>0:
# line 208 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_15
# IF block
# line 209: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_15: NOP
# end if
# line 210 if statement         if DetectTime>0:
# line 210 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_16
# IF block
# line 211: procedurecall             detect()
# line 120: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 121: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 122: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 123: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 124: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 125: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 126: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 127: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_16: NOP
# end if
# line 212 if statement         if CalibrateEvery>0:
# line 212 condition         if CalibrateEvery>0:
  LDWR CalibrateEvery
  JMPZ end_if_label_17
# IF block
# line 213 if statement             if CalibrationSkipCounter > CalibrateEvery:
# line 213 condition             if CalibrationSkipCounter > CalibrateEvery:
  LDWR CalibrationSkipCounter
  CMPGREATER CalibrateEvery
  JMPNCMP else_label_18
# IF block
# line 214: procedurecall                 calibrate()
# line 159: procedurecall     cool()
# line 77: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 78: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 79: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 80: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 81: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 82 assignment     coolPhotons = load_count( PMTChannel )
# line 82: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 83: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 160 if statement     if MaxInitRepeat>0:
# line 160 condition     if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_19
# IF block
# line 161: procedurecall         adaptiveCool()
# line 86 assignment     initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 87 while_statement     while coolPhotons<PresenceThreshold:
while_label_20: NOP
# line 87 condition     while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_20
# line 88 if statement         if initRemaining==0:
# line 88 condition         if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_21
# IF block
# line 89: procedurecall             exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_21: NOP
# end if
# line 90: add_assignment:         initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 91: procedurecall         cool()
# line 77: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 78: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 79: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 80: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 81: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 82 assignment     coolPhotons = load_count( PMTChannel )
# line 82: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 83: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_20
end_while_label_20: NOP
# end while
end_if_label_19: NOP
# end if
# line 162 if statement     if PumpTime>0:
# line 162 condition     if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_22
# IF block
# line 163: procedurecall         pump()
# line 94: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 95: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 96: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_22: NOP
# end if
# line 164: shiftexpression     MicrowaveCalibrationTime = piTime >>  one
  LDWR piTime
  SHR one
# line 164 assignment     MicrowaveCalibrationTime = piTime >>  one
  STWR MicrowaveCalibrationTime
# line 165: add_assignment:     MicrowaveCalibrationTime += piTime
  LDWR MicrowaveCalibrationTime
  ADDW piTime
  STWR MicrowaveCalibrationTime
# line 166: procedurecall     calibrationPulse()
# line 106: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 107: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 108: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 109: procedurecall     update( MicrowaveCalibrationTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveCalibrationTime
# line 110: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 167 if statement     if DetectTime>0:
# line 167 condition     if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_23
# IF block
# line 168: procedurecall         calibrationDetect()
# line 130: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 131: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 132: procedurecall     set_counter( CalibrationCounters )
  COUNTERMASK CalibrationCounters
# line 133: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 134: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 135: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 136: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 137: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 169 assignment         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
# line 169: procedurecall         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
  LDCOUNT CalibrationCounterNo
  STWR CalibrationDetectPhotons
# line 170 if statement         if CalibrationDetectPhotons > DetectThreshold:
# line 170 condition         if CalibrationDetectPhotons > DetectThreshold:
  LDWR CalibrationDetectPhotons
  CMPGREATER DetectThreshold
  JMPNCMP else_label_24
# IF block
# line 171: add_assignment:             PiTimeIntegrator -= 1
  DEC PiTimeIntegrator
  STWR PiTimeIntegrator
  JMP end_if_label_24
else_label_24: NOP
# ELSE block
# line 173: add_assignment:             PiTimeIntegrator += 1
  INC PiTimeIntegrator
  STWR PiTimeIntegrator
end_if_label_24: NOP
# end if
# line 174: shiftexpression         piTime = PiTimeIntegrator >> NumberIgnoredBits
  LDWR PiTimeIntegrator
  SHR NumberIgnoredBits
# line 174 assignment         piTime = PiTimeIntegrator >> NumberIgnoredBits
  STWR piTime
end_if_label_23: NOP
# end if
# line 215 assignment                 CalibrationSkipCounter = 0
  LDWR NULL
  STWR CalibrationSkipCounter
  JMP end_if_label_18
else_label_18: NOP
# ELSE block
# line 217: add_assignment:                 CalibrationSkipCounter += 1
  INC CalibrationSkipCounter
  STWR CalibrationSkipCounter
end_if_label_18: NOP
# end if
end_if_label_17: NOP
# end if
# line 218: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_2
end_while_label_2: NOP
# end while
  JMP while_label_1
end_while_label_1: NOP
# end while
# line 220: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END