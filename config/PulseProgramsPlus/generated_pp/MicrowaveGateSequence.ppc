# autogenerated from 'C:/Users/pmaunz/Documents/Programming/IonControl/config/PulseProgramsPlus/MicrowaveGateSequence.ppp' 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSMicrowave 2
const PMTChannel 8
# variables 
var NULL 0
var FFFFFFFF 4294967295
var inlinevar_2 1
var inlinevar_3 2
var inlinevar_4 8
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var MicrowaveFreq 40, parameter, MHz, AD9912_FRQ
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var InitializationShutter 1, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var PreWaitTime 0, parameter, ms
var QubitInitTime 0, parameter, ms
var QubitWaitTime 0, parameter, ms
var QubitAnalyzeTime 0, parameter, ms
var PostWaitTime 0, parameter, ms
var DetectTime 1, parameter, ms
var piTime 40, parameter, us
var PostPulseWaitTime 0, parameter, ms
var MaxInitRepeat 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsMicrowaveApply 0, trigger
var PresenceThreshold 6, parameter
var UseGateSequence 0, parameter
var offset 40, parameter, ns
var IonLostExitcode 0xfffe000000000001, exitcode
var endLabel 0xfffe000000000000, exitcode
var specialLabel 0xfffe000000000002, exitcode
var experimentsleft 100
var initRemaining 0
var trainPhase 0
var pulseTime 0, parameter
var gapTime 0, parameter
var PulsesRemaining 0
var RamStartAddress 0, address
var currentexperiment 0
var coolPhotons 0
# inline variables
# end header

# line 119: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 120: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 121: procedurecall set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 122: procedurecall set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 123: procedurecall set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 125 while_statement while not pipe_empty():
while_label_16: NOP
    JMPPIPEEMPTY end_while_label_16
# line 126: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 127: procedurecall     apply_next_scan_point()
apply_next_scan_point:  READPIPEINDF
  NOP
  WRITEPIPEINDF
  NOP
  READPIPE
  NOP
  WRITEPIPE
  NOP
  STWI
  JMPCMP apply_next_scan_point
# line 129 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 130 while_statement     while currentexperiment < experiments:
while_label_15: NOP
# line 130 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_15
# line 131: procedurecall         set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 132: procedurecall         cool()
# line 64: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 65: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 66: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 67: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 68: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 69 assignment     coolPhotons = load_count( PMTChannel )
# line 69: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 70: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 133 if statement         if MaxInitRepeat>0: 
# line 133 condition         if MaxInitRepeat>0: 
  LDWR MaxInitRepeat
  JMPZ end_if_label_6
# IF block
# line 134 assignment             initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 135 while_statement             while coolPhotons<PresenceThreshold:
while_label_5: NOP
# line 135 condition             while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_5
# line 136 if statement                 if initRemaining==0:
# line 136 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_4
# IF block
# line 137: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_4: NOP
# end if
# line 138: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 139: procedurecall                 cool()
# line 64: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 65: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 66: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 67: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 68: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 69 assignment     coolPhotons = load_count( PMTChannel )
# line 69: procedurecall     coolPhotons = load_count( PMTChannel )
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 70: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_5
end_while_label_5: NOP
# end while
end_if_label_6: NOP
# end if
# line 140 if statement         if PumpTime>0:
# line 140 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_7
# IF block
# line 141: procedurecall             pump()
# line 73: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 74: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 75: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_7: NOP
# end if
# line 142 if statement         if PreWaitTime>0:
# line 142 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_8
# IF block
# line 143: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_8: NOP
# end if
# line 144 if statement         if QubitInitTime>0: 
# line 144 condition         if QubitInitTime>0: 
  LDWR QubitInitTime
  JMPZ end_if_label_9
# IF block
# line 145: procedurecall             qubitInit()
# line 78: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 79: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 80: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 81: procedurecall     update( QubitInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitInitTime
# line 82: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_9: NOP
# end if
# line 146 if statement         if UseGateSequence>0:
# line 146 condition         if UseGateSequence>0:
  LDWR UseGateSequence
  JMPZ end_if_label_10
# IF block
# line 147: procedurecall             gateSequence()
# line 102 assignment     PulsesRemaining = read_ram() 
# line 102: procedurecall     PulsesRemaining = read_ram() 
  RAMREAD
  STWR PulsesRemaining
# line 103 while_statement     while PulsesRemaining>0:
while_label_3: NOP
# line 103 condition     while PulsesRemaining>0:
  LDWR PulsesRemaining
  JMPZ end_while_label_3
# line 104: add_assignment:         PulsesRemaining -= 1
  DEC PulsesRemaining
  STWR PulsesRemaining
# line 105 assignment         trainPhase = read_ram()
# line 105: procedurecall         trainPhase = read_ram()
  RAMREAD
  STWR trainPhase
# line 106 assignment         gapTime = read_ram()
# line 106: procedurecall         gapTime = read_ram()
  RAMREAD
  STWR gapTime
# line 107 if statement         if gapTime>0:
# line 107 condition         if gapTime>0:
  LDWR gapTime
  JMPZ end_if_label_1
# IF block
# line 108: procedurecall             set_dds( channel=DDSMicrowave, phase=trainPhase )
  DDSPHS DDSMicrowave, trainPhase
# line 109: procedurecall             set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 110: procedurecall             update( gapTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE gapTime
end_if_label_1: NOP
# end if
# line 111 assignment         pulseTime = read_ram()
# line 111: procedurecall         pulseTime = read_ram()
  RAMREAD
  STWR pulseTime
# line 112 if statement         if pulseTime>0:
# line 112 condition         if pulseTime>0:
  LDWR pulseTime
  JMPZ end_if_label_2
# IF block
# line 113: procedurecall             set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 114: procedurecall             update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 115: procedurecall             set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 116: procedurecall             update( PostPulseWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostPulseWaitTime
end_if_label_2: NOP
# end if
  JMP while_label_3
end_while_label_3: NOP
# end while
end_if_label_10: NOP
# end if
# line 148 if statement         if QubitWaitTime>0:
# line 148 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_11
# IF block
# line 149: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_11: NOP
# end if
# line 150 if statement         if QubitAnalyzeTime>0:
# line 150 condition         if QubitAnalyzeTime>0:
  LDWR QubitAnalyzeTime
  JMPZ end_if_label_12
# IF block
# line 151: procedurecall             qubitAnalyze()
# line 85: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveAnalyzePhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveAnalyzePhase
# line 86: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 87: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 88: procedurecall     update( QubitAnalyzeTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitAnalyzeTime
# line 89: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_12: NOP
# end if
# line 152 if statement         if PostWaitTime>0:
# line 152 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_13
# IF block
# line 153: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_13: NOP
# end if
# line 154 if statement         if DetectTime>0:
# line 154 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_14
# IF block
# line 155: procedurecall             detect()    
# line 92: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 93: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 94: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 95: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 96: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 97: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 98: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 99: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_14: NOP
# end if
# line 156: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_15
end_while_label_15: NOP
# end while
  JMP while_label_16
end_while_label_16: NOP
# end while
# line 158: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END