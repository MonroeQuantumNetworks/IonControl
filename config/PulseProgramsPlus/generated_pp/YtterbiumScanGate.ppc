# autogenerated from 'C:/Users/pmaunz/Documents/Programming/IonControl/config/PulseProgramsPlus/YtterbiumScanGate.ppp' 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSRaman2_1 4
const DDSRaman2_2 0
const DDSRaman2_carrier 7
const DDSRaman2_single 6
const PMTChannelSingle 8
const PMTChannelMulti1 9
const PMTChannelMulti2 10
const DDSMicrowave 2
# variables 
var NULL 0
var FFFFFFFF 4294967295
var inlinevar_2 1
var inlinevar_3 4
var inlinevar_4 7
var inlinevar_5 6
var inlinevar_6 8
var inlinevar_7 9
var inlinevar_8 10
var inlinevar_9 2
var dummypos 5, parameter, mm
var MicrowaveFreq 42, parameter, MHz, AD9912_FRQ
var MicrowaveAmp 1023, parameter
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var RamanFreq2_1 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_2 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_carrier 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_single 240, parameter, MHz, AD9912_FRQ
var RedSidebandFreq_1 247, parameter, MHz, AD9912_FRQ
var RedSidebandFreq_2 247, parameter, MHz, AD9912_FRQ
var RamanAOMCarrierFreq 247, parameter, MHz
var RamanCarrierShift 0, parameter, kHz
var RamanSingleDetuning 0, parameter, MHz
var RamanGateDetuning 0, parameter, MHz
var GateDetuningFromSideband 8, parameter, kHz
var RamanAnalyzePhase 0, parameter, , AD9912_PHASE
var RedSidebandDetuning_1 2, parameter, MHz
var RedSidebandDetuning_2 2, parameter, MHz
var InitialRedSidebandPiTime_1 10, parameter, us
var InitialRedSidebandPiTime_2 10, parameter, us
var RSBIncrement_1 1, parameter, us
var RSBIncrement_2 1, parameter, us
var InitializationShutter 0, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var RamanSingleOn_mask 0, mask
var RamanSingleOn 0, shutter RamanSingleOn_mask
var RamanGateOn_mask 0, mask
var RamanGateOn 0, shutter RamanGateOn_mask
var RamanAnalyzeOn_mask 0, mask
var RamanAnalyzeOn 0, shutter RamanAnalyzeOn_mask
var RamanOff_mask 0, mask
var RamanOff 0, shutter RamanOff_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var SbCoolingOn_1 0, parameter
var SbCoolingOn_2 0, parameter
var NumSBCoolingLoops 0, parameter
var PreWaitTime 2, parameter, us
var MicrowaveInitTime 10, parameter, us
var RamanInitTime 0, parameter, ms
var GateTime 125, parameter, us
var QubitWaitTime 0, parameter, ms
var AnalyzeTime 0, parameter, ms
var PostWaitTime 2, parameter, us
var DetectTime 1, parameter, ms
var AmplitudeSettlingTime 100, parameter, us
var MaxInitRepeatSingle 10, parameter
var MaxInitRepeatMulti 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsRamanApply 3, trigger
var PresenceThresholdSingle 6, parameter
var PresenceThresholdMulti 6, parameter
var IonLostExitcode 0xfffe0001, exitcode
var endLabel 0xffffffff, exitcode
var experimentsleft 100
var initRemaining 0
var currentexperiment 0
var coolPhotonsSingle 0
var coolPhotonsMulti 0
var coolPhotonsMulti1 0
var coolPhotonsMulti2 0
var SBCoolingLoopsLeft 0
var RedSidebandPiTime_1 10, , us
var RedSidebandPiTime_2 10, , us
# inline variables
# end header

# line 193: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 194: procedurecall update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 195: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 196: procedurecall set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 198 while_statement while not pipe_empty():
while_label_20: NOP
    JMPPIPEEMPTY end_while_label_20
# line 199: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 200: procedurecall     apply_next_scan_point()
apply_next_scan_point:  READPIPEINDF
  NOP
  WRITEPIPEINDF
  NOP
  READPIPE
  NOP
  WRITEPIPE
  NOP
  STWI
  JMPCMP apply_next_scan_point
# line 202: procedurecall     set_dds( channel=DDSRaman2_1, freq=RamanFreq2_1)
  DDSFRQ DDSRaman2_1, RamanFreq2_1
# line 203: procedurecall     set_dds( channel=DDSRaman2_2, freq=RamanFreq2_2)
  DDSFRQ DDSRaman2_2, RamanFreq2_2
# line 204: procedurecall     set_dds( channel=DDSRaman2_single, freq=RamanFreq2_single )
  DDSFRQ DDSRaman2_single, RamanFreq2_single
# line 205: procedurecall     set_dds( channel=DDSRaman2_carrier, freq=RamanFreq2_carrier, phase=RamanAnalyzePhase )
  DDSFRQ DDSRaman2_carrier, RamanFreq2_carrier
  DDSPHS DDSRaman2_carrier, RamanAnalyzePhase
# line 206: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 207: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, amp=MicrowaveAmp)
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSAMP DDSMicrowave, MicrowaveAmp
# line 209: procedurecall     set_trigger( ddsRamanApply )
  TRIGGER ddsRamanApply
# line 211 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 212 while_statement     while currentexperiment < experiments:
while_label_19: NOP
# line 212 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_19
# line 213: procedurecall         cool()
# line 106: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 107: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 108: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 109: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 110: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 111 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 111: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 112 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 112: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 113 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 113: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 114 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 115: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 116: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 214 if statement         if MaxInitRepeatSingle>0: 
# line 214 condition         if MaxInitRepeatSingle>0: 
  LDWR MaxInitRepeatSingle
  JMPZ end_if_label_3
# IF block
# line 215 assignment             initRemaining = MaxInitRepeatSingle
  LDWR MaxInitRepeatSingle
  STWR initRemaining
# line 216 while_statement             while coolPhotonsSingle<PresenceThresholdSingle:
while_label_2: NOP
# line 216 condition             while coolPhotonsSingle<PresenceThresholdSingle:
  LDWR coolPhotonsSingle
  CMPLESS PresenceThresholdSingle
  JMPNCMP end_while_label_2
# line 217 if statement                 if initRemaining==0:
# line 217 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_1
# IF block
# line 218: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_1: NOP
# end if
# line 219: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 220: procedurecall                 cool()
# line 106: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 107: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 108: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 109: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 110: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 111 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 111: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 112 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 112: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 113 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 113: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 114 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 115: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 116: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_2
end_while_label_2: NOP
# end while
end_if_label_3: NOP
# end if
# line 221 if statement         if MaxInitRepeatMulti>0: 
# line 221 condition         if MaxInitRepeatMulti>0: 
  LDWR MaxInitRepeatMulti
  JMPZ end_if_label_6
# IF block
# line 222 assignment             initRemaining = MaxInitRepeatMulti
  LDWR MaxInitRepeatMulti
  STWR initRemaining
# line 223 while_statement             while coolPhotonsMulti<PresenceThresholdMulti:
while_label_5: NOP
# line 223 condition             while coolPhotonsMulti<PresenceThresholdMulti:
  LDWR coolPhotonsMulti
  CMPLESS PresenceThresholdMulti
  JMPNCMP end_while_label_5
# line 224 if statement                 if initRemaining==0:
# line 224 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_4
# IF block
# line 225: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_4: NOP
# end if
# line 226: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 227: procedurecall                 cool()
# line 106: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 107: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 108: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 109: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 110: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 111 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 111: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 112 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 112: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 113 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 113: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 114 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 115: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 116: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_5
end_while_label_5: NOP
# end while
end_if_label_6: NOP
# end if
# line 228 if statement         if PumpTime>0:
# line 228 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_7
# IF block
# line 229: procedurecall             pump()
# line 119: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 120: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 121: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_7: NOP
# end if
# line 230 assignment         SBCoolingLoopsLeft = NumSBCoolingLoops
  LDWR NumSBCoolingLoops
  STWR SBCoolingLoopsLeft
# line 231 assignment         RedSidebandPiTime_1 = InitialRedSidebandPiTime_1
  LDWR InitialRedSidebandPiTime_1
  STWR RedSidebandPiTime_1
# line 232 assignment         RedSidebandPiTime_2 = InitialRedSidebandPiTime_2
  LDWR InitialRedSidebandPiTime_2
  STWR RedSidebandPiTime_2
# line 233 while_statement         while SBCoolingLoopsLeft > 0:
while_label_10: NOP
# line 233 condition         while SBCoolingLoopsLeft > 0:
  LDWR SBCoolingLoopsLeft
  JMPZ end_while_label_10
# line 234 if statement             if SbCoolingOn_1 > 0:
# line 234 condition             if SbCoolingOn_1 > 0:
  LDWR SbCoolingOn_1
  JMPZ end_if_label_8
# IF block
# line 235: procedurecall                 sidebandCoolPulse_1()
# line 173: procedurecall     set_dds( channel=DDSRaman2_single, freq=RedSidebandFreq_1 )
  DDSFRQ DDSRaman2_single, RedSidebandFreq_1
# line 174: procedurecall     set_trigger( ddsRamanApply )
  TRIGGER ddsRamanApply
# line 175: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 176: procedurecall     update( RedSidebandPiTime_1 )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RedSidebandPiTime_1
# line 177: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 178: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 179: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 180: procedurecall     set_inv_shutter( PumpingOn )   
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_8: NOP
# end if
# line 236 if statement             if SbCoolingOn_2 > 0:
# line 236 condition             if SbCoolingOn_2 > 0:
  LDWR SbCoolingOn_2
  JMPZ end_if_label_9
# IF block
# line 237: procedurecall                 sidebandCoolPulse_2()
# line 183: procedurecall     set_dds( channel=DDSRaman2_single, freq=RedSidebandFreq_2 )
  DDSFRQ DDSRaman2_single, RedSidebandFreq_2
# line 184: procedurecall     set_trigger( ddsRamanApply )
  TRIGGER ddsRamanApply
# line 185: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 186: procedurecall     update( RedSidebandPiTime_2 )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RedSidebandPiTime_2
# line 187: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 188: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 189: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 190: procedurecall     set_inv_shutter( PumpingOn )   
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_9: NOP
# end if
# line 238: add_assignment:             SBCoolingLoopsLeft -= 1
  DEC SBCoolingLoopsLeft
  STWR SBCoolingLoopsLeft
# line 239: add_assignment:             RedSidebandPiTime_1 += RSBIncrement_1
  LDWR RSBIncrement_1
  ADDW RedSidebandPiTime_1
  STWR RedSidebandPiTime_1
# line 240: add_assignment:             RedSidebandPiTime_2 += RSBIncrement_2
  LDWR RSBIncrement_2
  ADDW RedSidebandPiTime_2
  STWR RedSidebandPiTime_2
  JMP while_label_10
end_while_label_10: NOP
# end while
# line 241 if statement         if PreWaitTime>0:
# line 241 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_11
# IF block
# line 242: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_11: NOP
# end if
# line 243 if statement         if MicrowaveInitTime>0:
# line 243 condition         if MicrowaveInitTime>0:
  LDWR MicrowaveInitTime
  JMPZ end_if_label_12
# IF block
# line 244: procedurecall             microwaveInit()
# line 124: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 125: procedurecall     update( MicrowaveInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveInitTime
# line 126: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_12: NOP
# end if
# line 245 if statement         if RamanInitTime>0:
# line 245 condition         if RamanInitTime>0:
  LDWR RamanInitTime
  JMPZ end_if_label_13
# IF block
# line 246: procedurecall             ramanInit()
# line 129: procedurecall     set_dds( channel=DDSRaman2_single, freq=RamanFreq2_single)
  DDSFRQ DDSRaman2_single, RamanFreq2_single
# line 131: procedurecall     set_trigger( ddsRamanApply )
  TRIGGER ddsRamanApply
# line 132: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 133: procedurecall     update( RamanInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RamanInitTime
# line 134: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
end_if_label_13: NOP
# end if
# line 256 if statement         if GateTime>0:
# line 256 condition         if GateTime>0:
  LDWR GateTime
  JMPZ end_if_label_14
# IF block
# line 257: procedurecall            ramanGate()
# line 151: procedurecall     set_shutter( RamanGateOn )
  SHUTTERMASK RamanGateOn_mask
  ASYNCSHUTTER RamanGateOn
# line 152: procedurecall     update( GateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE GateTime
# line 153: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
end_if_label_14: NOP
# end if
# line 258 if statement         if QubitWaitTime>0:
# line 258 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_15
# IF block
# line 259: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_15: NOP
# end if
# line 260 if statement         if AnalyzeTime>0:
# line 260 condition         if AnalyzeTime>0:
  LDWR AnalyzeTime
  JMPZ end_if_label_16
# IF block
# line 261: procedurecall             ramanAnalyze()
# line 156: procedurecall     set_shutter( RamanAnalyzeOn )
  SHUTTERMASK RamanAnalyzeOn_mask
  ASYNCSHUTTER RamanAnalyzeOn
# line 157: procedurecall     update(AnalyzeTime)
  WAITDDSWRITEDONE
  WAIT
  UPDATE AnalyzeTime
# line 158: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 159: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_16: NOP
# end if
# line 262 if statement         if PostWaitTime>0:
# line 262 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_17
# IF block
# line 263: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_17: NOP
# end if
# line 264 if statement         if DetectTime>0:
# line 264 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_18
# IF block
# line 265: procedurecall             detect()    
# line 162: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 163: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 164: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 165: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 166: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 167: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 168: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 169: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 170: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_18: NOP
# end if
# line 266: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_19
end_while_label_19: NOP
# end while
  JMP while_label_20
end_while_label_20: NOP
# end while
# line 268: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END