# autogenerated from 'C:/Users/Public/Documents/IonControl/config/PulseProgramsPlus/YtterbiumScanGate.ppp' 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSRaman2_1 4
const DDSRaman2_2 0
const DDSRaman2_carrier 7
const DDSRaman2_single 6
const PMTChannelSingle 8
const PMTChannelMulti1 9
const PMTChannelMulti2 10
const DDSMicrowave 2
# variables 
var NULL 0
var FFFFFFFF 4294967295
var inlinevar_2 1
var inlinevar_3 4
var inlinevar_4 7
var inlinevar_5 6
var inlinevar_6 8
var inlinevar_7 9
var inlinevar_8 10
var inlinevar_9 2
var dummypos 5, parameter, mm
var dummy2 0, parameter, mm
var MicrowaveFreq 42, parameter, MHz, AD9912_FRQ
var MicrowaveAmp 1023, parameter
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var RamanFreq2_1 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_1fine 240, parameter, MHz, AD9912_FRQFINE
var RamanFreq2_2 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_2fine 240, parameter, MHz, AD9912_FRQFINE
var RamanFreq2_carrier 240, parameter, MHz, AD9912_FRQ
var RamanFreq2_carrierfine 240, parameter, MHz, AD9912_FRQFINE
var RamanFreq2_single 240, parameter, MHz, AD9912_FRQ
var RedSidebandFreq_1 247, parameter, MHz, AD9912_FRQ
var RedSidebandFreq_2 247, parameter, MHz, AD9912_FRQ
var RamanAOMCarrierFreq 247, parameter, MHz
var RamanCarrierShift 0, parameter, kHz
var RamanSingleDetuning 0, parameter, MHz
var RamanGateDetuning 0, parameter, MHz
var GateDetuningFromSideband 8, parameter, kHz
var RamanAnalyzePhase 0, parameter, , AD9912_PHASE
var RedSidebandDetuning_1 2, parameter, MHz
var RedSidebandDetuning_2 2, parameter, MHz
var InitialRedSidebandPiTime_1 10, parameter, us
var InitialRedSidebandPiTime_2 10, parameter, us
var RSBIncrement_1 1, parameter, us
var RSBIncrement_2 1, parameter, us
var InitializationShutter 0, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var RamanSingleOn_mask 0, mask
var RamanSingleOn 0, shutter RamanSingleOn_mask
var RamanGateOn_mask 0, mask
var RamanGateOn 0, shutter RamanGateOn_mask
var RamanAnalyzeOn_mask 0, mask
var RamanAnalyzeOn 0, shutter RamanAnalyzeOn_mask
var RamanOff_mask 0, mask
var RamanOff 0, shutter RamanOff_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var SbCoolingOn_1 0, parameter
var SbCoolingOn_2 0, parameter
var NumSBCoolingLoops 0, parameter
var PreWaitTime 2, parameter, us
var MicrowaveInitTime 10, parameter, us
var RamanInitTime 0, parameter, ms
var GateTime 125, parameter, us
var QubitWaitTime 0, parameter, ms
var AnalyzeTime 0, parameter, ms
var PostWaitTime 2, parameter, us
var DetectTime 1, parameter, ms
var AmplitudeSettlingTime 100, parameter, us
var MaxInitRepeatSingle 10, parameter
var MaxInitRepeatMulti 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsRamanApply 3, trigger
var ddsApplyAll 3, trigger
var PresenceThresholdSingle 6, parameter
var PresenceThresholdMulti 6, parameter
var IonLostExitcode 0xfffe0001, exitcode
var endLabel 0xffffffff, exitcode
var experimentsleft 100
var initRemaining 0
var currentexperiment 0
var coolPhotonsSingle 0
var coolPhotonsMulti 0
var coolPhotonsMulti1 0
var coolPhotonsMulti2 0
var SBCoolingLoopsLeft 0
var RedSidebandPiTime_1 10, , us
var RedSidebandPiTime_2 10, , us
# inline variables
# end header

# line 202: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 203: procedurecall update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 204: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 206: procedurecall set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 208 while_statement while not pipe_empty():
while_label_20: NOP
    JMPPIPEEMPTY end_while_label_20
# line 209: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 210: procedurecall     apply_next_scan_point()
apply_next_scan_point:  READPIPEINDF
  NOP
  WRITEPIPEINDF
  NOP
  READPIPE
  NOP
  WRITEPIPE
  NOP
  STWI
  JMPCMP apply_next_scan_point
# line 212: procedurecall     set_dds( channel=DDSRaman2_1, freq=RamanFreq2_1, freqfine=RamanFreq2_1fine )
  DDSFRQ DDSRaman2_1, RamanFreq2_1
  DDSFRQFINE DDSRaman2_1, RamanFreq2_1fine
  NOP
# line 213: procedurecall     set_dds( channel=DDSRaman2_2, freq=RamanFreq2_2 , freqfine=RamanFreq2_2fine)
  DDSFRQ DDSRaman2_2, RamanFreq2_2
  DDSFRQFINE DDSRaman2_2, RamanFreq2_2fine
  NOP
# line 214: procedurecall     set_dds( channel=DDSRaman2_single, freq=RamanFreq2_single )
  DDSFRQ DDSRaman2_single, RamanFreq2_single
# line 215: procedurecall     set_dds( channel=DDSRaman2_carrier, freq=RamanFreq2_carrier, freqfine=RamanFreq2_carrierfine, phase=RamanAnalyzePhase )
  DDSFRQ DDSRaman2_carrier, RamanFreq2_carrier
  DDSPHS DDSRaman2_carrier, RamanAnalyzePhase
  DDSFRQFINE DDSRaman2_carrier, RamanFreq2_carrierfine
  NOP
# line 216: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 217: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, amp=MicrowaveAmp)
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSAMP DDSMicrowave, MicrowaveAmp
# line 220: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 222 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 223 while_statement     while currentexperiment < experiments:
while_label_19: NOP
# line 223 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_19
# line 224: procedurecall         cool()
# line 111: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 112: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 113: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 114: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 115: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 116 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 116: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 117 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 117: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 118 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 118: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 119 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 120: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 121: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 225 if statement         if MaxInitRepeatSingle>0: 
# line 225 condition         if MaxInitRepeatSingle>0: 
  LDWR MaxInitRepeatSingle
  JMPZ end_if_label_3
# IF block
# line 226 assignment             initRemaining = MaxInitRepeatSingle
  LDWR MaxInitRepeatSingle
  STWR initRemaining
# line 227 while_statement             while coolPhotonsSingle<PresenceThresholdSingle:
while_label_2: NOP
# line 227 condition             while coolPhotonsSingle<PresenceThresholdSingle:
  LDWR coolPhotonsSingle
  CMPLESS PresenceThresholdSingle
  JMPNCMP end_while_label_2
# line 228 if statement                 if initRemaining==0:
# line 228 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_1
# IF block
# line 229: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_1: NOP
# end if
# line 230: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 231: procedurecall                 cool()
# line 111: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 112: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 113: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 114: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 115: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 116 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 116: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 117 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 117: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 118 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 118: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 119 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 120: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 121: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_2
end_while_label_2: NOP
# end while
end_if_label_3: NOP
# end if
# line 232 if statement         if MaxInitRepeatMulti>0: 
# line 232 condition         if MaxInitRepeatMulti>0: 
  LDWR MaxInitRepeatMulti
  JMPZ end_if_label_6
# IF block
# line 233 assignment             initRemaining = MaxInitRepeatMulti
  LDWR MaxInitRepeatMulti
  STWR initRemaining
# line 234 while_statement             while coolPhotonsMulti<PresenceThresholdMulti:
while_label_5: NOP
# line 234 condition             while coolPhotonsMulti<PresenceThresholdMulti:
  LDWR coolPhotonsMulti
  CMPLESS PresenceThresholdMulti
  JMPNCMP end_while_label_5
# line 235 if statement                 if initRemaining==0:
# line 235 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_4
# IF block
# line 236: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_4: NOP
# end if
# line 237: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 238: procedurecall                 cool()
# line 111: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 112: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 113: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 114: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 115: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 116 assignment     coolPhotonsSingle = load_count( PMTChannelSingle )
# line 116: procedurecall     coolPhotonsSingle = load_count( PMTChannelSingle )
  LDCOUNT PMTChannelSingle
  STWR coolPhotonsSingle
# line 117 assignment     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
# line 117: procedurecall     coolPhotonsMulti1 = load_count( PMTChannelMulti1 )
  LDCOUNT PMTChannelMulti1
  STWR coolPhotonsMulti1
# line 118 assignment     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
# line 118: procedurecall     coolPhotonsMulti2 = load_count( PMTChannelMulti2 )
  LDCOUNT PMTChannelMulti2
  STWR coolPhotonsMulti2
# line 119 assignment     coolPhotonsMulti = coolPhotonsMulti1
  LDWR coolPhotonsMulti1
  STWR coolPhotonsMulti
# line 120: add_assignment:     coolPhotonsMulti += coolPhotonsMulti2
  LDWR coolPhotonsMulti2
  ADDW coolPhotonsMulti
  STWR coolPhotonsMulti
# line 121: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_5
end_while_label_5: NOP
# end while
end_if_label_6: NOP
# end if
# line 239 if statement         if PumpTime>0:
# line 239 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_7
# IF block
# line 240: procedurecall             pump()
# line 124: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 125: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 126: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_7: NOP
# end if
# line 241 assignment         SBCoolingLoopsLeft = NumSBCoolingLoops
  LDWR NumSBCoolingLoops
  STWR SBCoolingLoopsLeft
# line 242 assignment         RedSidebandPiTime_1 = InitialRedSidebandPiTime_1
  LDWR InitialRedSidebandPiTime_1
  STWR RedSidebandPiTime_1
# line 243 assignment         RedSidebandPiTime_2 = InitialRedSidebandPiTime_2
  LDWR InitialRedSidebandPiTime_2
  STWR RedSidebandPiTime_2
# line 244 while_statement         while SBCoolingLoopsLeft > 0:
while_label_10: NOP
# line 244 condition         while SBCoolingLoopsLeft > 0:
  LDWR SBCoolingLoopsLeft
  JMPZ end_while_label_10
# line 245 if statement             if SbCoolingOn_1 > 0:
# line 245 condition             if SbCoolingOn_1 > 0:
  LDWR SbCoolingOn_1
  JMPZ end_if_label_8
# IF block
# line 246: procedurecall                 sidebandCoolPulse_1()
# line 180: procedurecall     set_dds( channel=DDSRaman2_single, freq=RedSidebandFreq_1 )
  DDSFRQ DDSRaman2_single, RedSidebandFreq_1
# line 182: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 183: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 184: procedurecall     update( RedSidebandPiTime_1 )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RedSidebandPiTime_1
# line 185: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 186: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 187: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 188: procedurecall     set_inv_shutter( PumpingOn )   
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_8: NOP
# end if
# line 247 if statement             if SbCoolingOn_2 > 0:
# line 247 condition             if SbCoolingOn_2 > 0:
  LDWR SbCoolingOn_2
  JMPZ end_if_label_9
# IF block
# line 248: procedurecall                 sidebandCoolPulse_2()
# line 191: procedurecall     set_dds( channel=DDSRaman2_single, freq=RedSidebandFreq_2 )
  DDSFRQ DDSRaman2_single, RedSidebandFreq_2
# line 193: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 194: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 195: procedurecall     update( RedSidebandPiTime_2 )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RedSidebandPiTime_2
# line 196: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 197: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 198: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 199: procedurecall     set_inv_shutter( PumpingOn )   
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_9: NOP
# end if
# line 249: add_assignment:             SBCoolingLoopsLeft -= 1
  DEC SBCoolingLoopsLeft
  STWR SBCoolingLoopsLeft
# line 250: add_assignment:             RedSidebandPiTime_1 += RSBIncrement_1
  LDWR RSBIncrement_1
  ADDW RedSidebandPiTime_1
  STWR RedSidebandPiTime_1
# line 251: add_assignment:             RedSidebandPiTime_2 += RSBIncrement_2
  LDWR RSBIncrement_2
  ADDW RedSidebandPiTime_2
  STWR RedSidebandPiTime_2
  JMP while_label_10
end_while_label_10: NOP
# end while
# line 252 if statement         if PreWaitTime>0:
# line 252 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_11
# IF block
# line 253: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_11: NOP
# end if
# line 254 if statement         if MicrowaveInitTime>0:
# line 254 condition         if MicrowaveInitTime>0:
  LDWR MicrowaveInitTime
  JMPZ end_if_label_12
# IF block
# line 255: procedurecall             microwaveInit()
# line 129: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 130: procedurecall     update( MicrowaveInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveInitTime
# line 131: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_12: NOP
# end if
# line 256 if statement         if RamanInitTime>0:
# line 256 condition         if RamanInitTime>0:
  LDWR RamanInitTime
  JMPZ end_if_label_13
# IF block
# line 257: procedurecall             ramanInit()
# line 134: procedurecall     set_dds( channel=DDSRaman2_single, freq=RamanFreq2_single)
  DDSFRQ DDSRaman2_single, RamanFreq2_single
# line 137: procedurecall     set_trigger( ddsApplyAll)
  TRIGGER ddsApplyAll
# line 138: procedurecall     set_shutter( RamanSingleOn )
  SHUTTERMASK RamanSingleOn_mask
  ASYNCSHUTTER RamanSingleOn
# line 139: procedurecall     update( RamanInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE RamanInitTime
# line 140: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
end_if_label_13: NOP
# end if
# line 267 if statement         if GateTime>0:
# line 267 condition         if GateTime>0:
  LDWR GateTime
  JMPZ end_if_label_14
# IF block
# line 268: procedurecall            ramanGate()
# line 157: procedurecall     set_shutter( RamanGateOn )
  SHUTTERMASK RamanGateOn_mask
  ASYNCSHUTTER RamanGateOn
# line 158: procedurecall     update( GateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE GateTime
# line 159: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
end_if_label_14: NOP
# end if
# line 269 if statement         if QubitWaitTime>0:
# line 269 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_15
# IF block
# line 270: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_15: NOP
# end if
# line 271 if statement         if AnalyzeTime>0:
# line 271 condition         if AnalyzeTime>0:
  LDWR AnalyzeTime
  JMPZ end_if_label_16
# IF block
# line 272: procedurecall             ramanAnalyze()
# line 162: procedurecall     set_shutter( RamanAnalyzeOn )
  SHUTTERMASK RamanAnalyzeOn_mask
  ASYNCSHUTTER RamanAnalyzeOn
# line 163: procedurecall     update(AnalyzeTime)
  WAITDDSWRITEDONE
  WAIT
  UPDATE AnalyzeTime
# line 164: procedurecall     set_shutter( RamanOff )
  SHUTTERMASK RamanOff_mask
  ASYNCSHUTTER RamanOff
# line 165: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_16: NOP
# end if
# line 273 if statement         if PostWaitTime>0:
# line 273 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_17
# IF block
# line 274: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_17: NOP
# end if
# line 275 if statement         if DetectTime>0:
# line 275 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_18
# IF block
# line 276: procedurecall             detect()    
# line 168: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 169: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 170: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 172: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 173: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 174: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 175: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 176: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 177: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_18: NOP
# end if
# line 277: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_19
end_while_label_19: NOP
# end while
  JMP while_label_20
end_while_label_20: NOP
# end while
# line 279: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END