import ctypes 

ThumLib = ctypes.windll.LoadLibrary('THUM.dll')

#Create function names for all functions contained in the THUMB dll
Read = ThumLib.Read
GetTempUnit = ThumLib.GetTempUnit
SetTempUnit = ThumLib.SetTempUnit
GetTemp = ThumLib.GetTemp
GetRH = ThumLib.GetRH
GetDewPt = ThumLib.GetDewPt
Reset = ThumLib.Reset
SetDevID = ThumLib.SetDevID
GetDevID = ThumLib.GetDevID
ReadIRprox = ThumLib.ReadIRprox
GetIRprox = ThumLib.GetIRprox
ReadTempOnly = ThumLib.ReadTempOnly
GetTempOnly = ThumLib.GetTempOnly
ReadSwitch = ThumLib.ReadSwitch
GetSwitch = ThumLib.GetSwitch
ReadUltrasonic = ThumLib.ReadUltrasonic
GetUltrasonic = ThumLib.GetUltrasonic
ReadExternalTempOnly = ThumLib.ReadExternalTempOnly
GetExternalTempOnly = ThumLib.GetExternalTempOnly
ReadSwitch2 = ThumLib.ReadSwitch2
GetSwitch2 = ThumLib.GetSwitch2
ReadSwitch3 = ThumLib.ReadSwitch3
GetSwitch3 = ThumLib.GetSwitch3

#Define the input and output parameters of all functions in the THUMB dll
Read.restype = ctypes.c_long

GetTempUnit.restype = ctypes.c_long

SetTempUnit.argtypes = [ctypes.c_double]
SetTempUnit.restype = ctypes.c_long

GetTemp.restype = ctypes.c_double

GetRH.restype = ctypes.c_double

GetDewPt.restype = ctypes.c_double

Reset.restype = ctypes.c_long

SetDevID.argtypes = [ctypes.c_uint8]

GetDevID.restype = ctypes.c_uint8

ReadIRprox.restype = ctypes.c_long

GetIRprox.restype = ctypes.c_double

ReadTempOnly.restype = ctypes.c_long

GetTempOnly.restype = ctypes.c_double

ReadSwitch.restype = ctypes.c_long

GetSwitch.restype = ctypes.c_double

ReadUltrasonic.restype = ctypes.c_long

GetUltrasonic.restype = ctypes.c_double

ReadExternalTempOnly = ctypes.c_long

GetExternalTempOnly = ctypes.c_double

ReadSwitch2.restype = ctypes.c_long

GetSwitch2.restype = ctypes.c_double

ReadSwitch3.restype = ctypes.c_long

GetSwitch3.restype = ctypes.c_double

class THUM(object):
    def __init__(self):
        self.temp = 0.0
        self.dewPt = 0.0
        self.rH = 0.0

    def Read(self):
        err = Read()
        if err > 0:
            raise ThumError(code = err)
        self.temp = GetTemp()
        self.rH = GetRH()
        self.dewPt = GetDewPt()
        data = {'temp': self.temp, 'rH':self.rH, 'dewPt':self.dewPt}
        return data

    def _getTempUnit(self):
        unit = GetTempUnit()
        if unit == 1:
            unit = 'C'
        elif unit == 2:
            unit = 'F'
        else:
            raise ValueError('The THUM dll returned an invalid unit value: {0}'.format(unit))
        return unit

    def _setTempUnit(self, value):
        if type(value) == int:
            err = SetTempUnit(value)
        elif type(value) == str:
            validUnits = ('C', 'F', 'notValid')
            for i, unit in enumerate(validUnits):
                if unit == value:
                    break
            if validUnits[i] == 'notValid':
                errStr = "Expected 'C' or 'F' Got {}".format(value)
                raise ValueError(errStr)
            intValue = i + 1
            print intValue
            err = SetTempUnit(intValue)
        if err > 0:
            raise ThumError(code = err)

    tempUnit = property(_getTempUnit, _setTempUnit)

class ThumError(Exception):
    def __init__(self, **kwargs):
        self.code = kwargs.get('code', 0)
        errorMsgs = ('SUCCESS', 'Bad Temperature Unit', 'THUM Not Found',
                'Read Timeout', 'Write Failed', 'Read Failed',
                'Result Out Of Range')
        self.msg =  errorMsgs[self.code]

    def __str__(self):
        ret = '\n\tCode: {0} \n\tMessage: {1}'.format(self.code, self.msg)
        return ret


if __name__ == '__main__':
    myThum = THUM()
    myThum.tempUnit = 2
    myThum.tempUnit
    print myThum.Read()
